apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: my-cluster
spec:
  kafka:
    replicas: 3
    # set the kafka version
    #version: 3.5.1
    config:
      # set lowest protocol version (downgrade is not supported)
      #inter.broker.protocol.version: "3.5"
      num.partitions: 3
      default.replication.factor: 3
      min.insync.replicas: 2
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
    logging:
      type: inline
      loggers:
        kafka.root.logger.level: "INFO"
    resources:
      # pod scheduling is only made based on requests
      # we set memory requests==limits to avoid being evicted when the node is under pressure
      # in production you can also set CPU requests==limits to have Guaranteed pod QoS
      limits:
        cpu: 2000m
        memory: 2Gi
      requests:
        cpu: 1000m
        memory: 2Gi
    storage:
      size: 10Gi
      type: persistent-claim
      deleteClaim: false
    readinessProbe:
      initialDelaySeconds: 60
      timeoutSeconds: 10
    livenessProbe:
      initialDelaySeconds: 60
      timeoutSeconds: 10
    template:
      pod:
        terminationGracePeriodSeconds: 60
  zookeeper:
    replicas: 3
    logging:
      type: inline
      loggers:
        zookeeper.root.logger: "INFO"
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 1Gi
    storage:
      size: 5Gi
      type: persistent-claim
      deleteClaim: false
    readinessProbe:
      initialDelaySeconds: 60
      timeoutSeconds: 10
    livenessProbe:
      initialDelaySeconds: 60
      timeoutSeconds: 10
  entityOperator:
    topicOperator:
      logging:
        type: inline
        loggers:
          rootLogger.level: "INFO"
      resources:
        limits:
          memory: 512Mi
        requests:
          cpu: 500m
          memory: 256Mi
      readinessProbe:
        initialDelaySeconds: 60
        timeoutSeconds: 10
      livenessProbe:
        initialDelaySeconds: 60
        timeoutSeconds: 10
    userOperator:
      logging:
        type: inline
        loggers:
          rootLogger.level: "INFO"
      resources:
        limits:
          memory: 512Mi
        requests:
          cpu: 500m
          memory: 256Mi
      readinessProbe:
        initialDelaySeconds: 60
        timeoutSeconds: 10
      livenessProbe:
        initialDelaySeconds: 60
        timeoutSeconds: 10
